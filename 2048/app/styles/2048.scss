
$width: 400px;          // The width of the whole board
$tile-count: 4;         // The number of tiles per row/column
$tile-padding: 15px;    // The padding between tiles

$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;


#game {
  position: relative;
  width: $width;
  height: $width; // The gameboard is a square

    .grid-container {
      position: absolute;
      z-index: 1;
      margin: 0 auto;

      .grid-cell {
        width: $tile-size;
        height: $tile-size;
        margin-bottom: $tile-padding;
        margin-right: $tile-padding;
        float: left;
        @include border-radius($tile-radius);
        background: rgba(238, 228, 218, 0.35);
        &:last-child {
          margin-right: 0
        }
      }
    }



    .tile-container {
      position: absolute;
      z-index: 2;

      .unstyled-tile {
        font-family: $tile-font;
        position: absolute;
        width: $tile-size;
        height: $tile-size;
        background: white;
        margin: 0 auto;
        font-size: 2em;
        text-align: center;
        font-weight: bold;
        z-index: 10;
        font-size: 2.5em;
        line-height: ($width/$tile-count) - $tile-padding;
      }
      .tile {
        font-family: $tile-font;
        position: absolute;
        width: $tile-size;
        height: $tile-size;
        @include border-radius($tile-radius);
        @include transition($transition-time ease-in-out);
        // @include transition-property(transform);
        -webkit-transition-property: -webkit-transform;
        -moz-transition-property: -moz-transform;
        transition-property: transform;
        z-index: 2;

        &.tile-merged .tile-inner {
          @include animation(pop 200ms ease-in);
        }

        @for $x from 1 through $tile-count {
          @for $y from 1 through $tile-count {
            $zeroOffsetX: $x - 1;
            $zeroOffsetY: $y - 1;
            $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);
            $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);

            &.position-#{$zeroOffsetX}-#{$zeroOffsetY} { 
              @include transform(translate($newX, $newY));
            }
          }
        }

        @for $i from 1 through length($colors) {
          &.tile-#{power(2, $i)} .tile-inner {
            background: nth($colors, $i)
          }
        }
        &:last-child {
          margin-right: 0
        }

        .tile-inner {
          line-height: ($width/$tile-count) - $tile-padding;

          text-align: center;
          font-weight: bold;
          z-index: 10;
          font-size: 2.5em;
        }
      }
    }




}
